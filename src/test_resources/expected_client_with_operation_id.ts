// THIS FILE IS AUTO-GENERATED BY openapi-fetch-gen.
// DO NOT EDIT THIS FILE MANUALLY.
// See Also: https://github.com/moznion/openapi-fetch-gen
import createClient, {
  type Client as ClientOap,
  type ClientOptions,
} from "openapi-fetch";
import type { components, paths } from "./schema.d.ts"; // generated by openapi-typescript

export class Client<HT extends Record<string, string> = never> {
  readonly client: ClientOap<paths>;
  defaultHeaders: HT;

  constructor(clientOptions: ClientOptions, defaultHeaders?: HT) {
    this.client = createClient<paths>(clientOptions);
    this.defaultHeaders = defaultHeaders ?? ({} as HT);
  }

  async listUsers(opts: {
    query: {
      page?: number;
      pageSize?: number;
      membershipType?: "REGULAR" | "PREMIUM" | "STUDENT";
    };
  }) {
    return await this.client.GET("/users", {
      params: {
        query: opts.query,
      },
    });
  }

  async createUser(opts: {
    body: {
      name: string;
      email: string;
      membershipType: "REGULAR" | "PREMIUM" | "STUDENT";
      address?: {
        postalCode?: string;
        street: string;
        city: string;
        country: string;
      };
    };
  }) {
    return await this.client.POST("/users", {
      body: opts.body,
    });
  }

  async getUserDetails(opts: { path: { userId: string } }) {
    return await this.client.GET("/users/{userId}", {
      params: {
        path: opts.path,
      },
    });
  }

  async replaceUser(opts: {
    path: { userId: string };
    body: {
      name: string;
      email: string;
      membershipType: "REGULAR" | "PREMIUM" | "STUDENT";
      address?: {
        postalCode?: string;
        street: string;
        city: string;
        country: string;
      };
    } & { id: string };
  }) {
    return await this.client.PUT("/users/{userId}", {
      params: {
        path: opts.path,
      },
      body: opts.body,
    });
  }

  async deleteUser(opts: { path: { userId: string } }) {
    return await this.client.DELETE("/users/{userId}", {
      params: {
        path: opts.path,
      },
    });
  }

  async updateUserFields(opts: {
    path: { userId: string };
    body: {
      name?: string;
      email?: string;
      membershipType?: "REGULAR" | "PREMIUM" | "STUDENT";
      address?: {
        postalCode?: string;
        street: string;
        city: string;
        country: string;
      };
    };
  }) {
    return await this.client.PATCH("/users/{userId}", {
      params: {
        path: opts.path,
      },
      body: opts.body,
    });
  }

  async listUserLoans(opts: { path: { userId: string } }) {
    return await this.client.GET("/users/{userId}/loans", {
      params: {
        path: opts.path,
      },
    });
  }

  async searchUsers(opts: {
    body: {
      name?: string;
      email?: string;
      joinedAfter?: string;
      membershipType?: "REGULAR" | "PREMIUM" | "STUDENT";
    };
  }) {
    return await this.client.POST("/users/search", {
      body: opts.body,
    });
  }

  async bulk_User_Imp_ort(opts: { body: { file?: string } }) {
    return await this.client.POST("/users/bulk", {
      body: opts.body,
    });
  }

  async getUsersBulkJobid(
    opts: ([
      Exclude<
        keyof Omit<
          {
            Authorization: string;
            "Application-Version": string;
            "Something-Id": string;
          },
          "Content-Type"
        >,
        Extract<
          keyof HT,
          keyof Omit<
            {
              Authorization: string;
              "Application-Version": string;
              "Something-Id": string;
            },
            "Content-Type"
          >
        >
      >,
    ] extends [never]
      ? {
          header?: Omit<
            {
              Authorization: string;
              "Application-Version": string;
              "Something-Id": string;
            },
            "Content-Type"
          >;
        }
      : {
          header:
            | (Pick<
                Omit<
                  {
                    Authorization: string;
                    "Application-Version": string;
                    "Something-Id": string;
                  },
                  "Content-Type"
                >,
                Exclude<
                  keyof Omit<
                    {
                      Authorization: string;
                      "Application-Version": string;
                      "Something-Id": string;
                    },
                    "Content-Type"
                  >,
                  Extract<
                    keyof HT,
                    keyof Omit<
                      {
                        Authorization: string;
                        "Application-Version": string;
                        "Something-Id": string;
                      },
                      "Content-Type"
                    >
                  >
                >
              > &
                Partial<
                  Record<
                    Extract<
                      keyof HT,
                      keyof Omit<
                        {
                          Authorization: string;
                          "Application-Version": string;
                          "Something-Id": string;
                        },
                        "Content-Type"
                      >
                    >,
                    never
                  >
                >)
            | Omit<
                {
                  Authorization: string;
                  "Application-Version": string;
                  "Something-Id": string;
                },
                "Content-Type"
              >;
        }) & { path: { jobId: string } },
  ) {
    return await this.client.GET("/users/bulk/{jobId}", {
      params: {
        header: { ...this.defaultHeaders, ...(opts?.header ?? []) } as {
          Authorization: string;
          "Application-Version": string;
          "Something-Id": string;
        },
        path: opts.path,
      },
    });
  }
}

export type Error = components["schemas"]["Error"];
export type User = components["schemas"]["User"];
export type Address = components["schemas"]["Address"];
export type UserCreate = components["schemas"]["UserCreate"];
export type UserUpdate = components["schemas"]["UserUpdate"];
export type UserPatch = components["schemas"]["UserPatch"];
export type UserList = components["schemas"]["UserList"];
export type UserPage = components["schemas"]["UserPage"];
export type Loan = components["schemas"]["Loan"];
export type Book = components["schemas"]["Book"];
export type BulkJobStatus = components["schemas"]["BulkJobStatus"];
export type ClientSchema = components["schemas"]["Client"];
export type schema_Something = components["schemas"]["schema-Something"];
