"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.genClient = genClient;
const node_child_process_1 = require("node:child_process");
const node_fs_1 = __importDefault(require("node:fs"));
const node_path_1 = __importDefault(require("node:path"));
const tmp_1 = __importDefault(require("tmp"));
const ts_morph_1 = require("ts-morph");
const endpoint_1 = require("./endpoint");
const utils_1 = require("./utils");
function genClient(pathSchema, opts = {}) {
    const project = new ts_morph_1.Project({
        compilerOptions: {
            target: ts_morph_1.ScriptTarget.Latest,
            module: ts_morph_1.ModuleKind.ESNext,
        },
    });
    const f = project.addSourceFileAtPath(pathSchema);
    const code = `
// THIS FILE IS AUTO-GENERATED BY openapi-fetch-gen.
// DO NOT EDIT THIS FILE MANUALLY.
// See Also: https://github.com/moznion/openapi-fetch-gen
import createClient, { type ClientOptions, Client as ClientOap } from "openapi-fetch";
import type { components, paths } from "${!opts.schemaImportPathPrefix
        ? `./${node_path_1.default.basename(pathSchema)}`
        : `${opts.schemaImportPathPrefix}${node_path_1.default.basename(pathSchema)}`}"; // generated by openapi-typescript

${genClientClassCode((0, endpoint_1.extractEndpointsInfo)((0, utils_1.findInterface)(f, "paths") ??
        (0, utils_1.throwError)(`Interface "paths" not found in ${pathSchema}`)), opts)}

${genSchemaTypesCode((0, utils_1.findInterface)(f, "components"))}
`;
    const fTmp = tmp_1.default.fileSync({ postfix: ".ts" }).name;
    node_fs_1.default.writeFileSync(fTmp, code);
    (0, node_child_process_1.execSync)(`npx biome check --write ${fTmp}`);
    return node_fs_1.default.readFileSync(fTmp, "utf-8");
}
function genClientClassCode(eps, opts = {}) {
    const c = eps
        .map((ep) => {
        const headerContentType = ep.bodyContentType
            ? `"Content-Type": "${ep.bodyContentType}", `
            : "";
        const paramsEach = Object.entries({
            header: ep.headerType
                ? `{${headerContentType}...this.defaultHeaders, ...opts.header} as ${ep.headerType}`
                : "",
            path: ep.pathType ? "opts.path" : "",
            query: ep.queryType ? "opts.query" : "",
        })
            .filter((kv) => kv[1] !== "")
            .map((kv) => `${kv[0]}: ${kv[1]}`)
            .join(",\n                ");
        const params = [
            paramsEach
                ? `params: {\n                ${paramsEach}\n            }`
                : "",
            ep.bodyType ? "body: opts.body" : "",
        ]
            .filter((v) => v !== "")
            .join(",\n            ");
        return `\n
    async ${opts.useOperationId && ep.opId ? ep.opId : ep.opName}(${ep.optsType ? `\n       opts: ${ep.optsType}    ) {` : ") {"}
        return await this.client.${ep.method.toUpperCase()}("${ep.path}", ${params ? `{\n            ${params}\n        });` : "{});"}
    }`;
    })
        .join("");
    return `
export class Client<HT extends Record<string, string> = never> {
    readonly client: ClientOap<paths>;
    defaultHeaders: HT;

    constructor(clientOptions: ClientOptions, defaultHeaders?: HT) {
        this.client = createClient<paths>(clientOptions);
        this.defaultHeaders = defaultHeaders ?? ({} as HT);
    }${c}
}
`.slice(1);
}
function genSchemaTypesCode(componentsIf) {
    return `
${componentsIf
        ?.getProperty("schemas")
        ?.getType()
        .getProperties()
        .map((schema) => {
        if (!schema.getValueDeclaration()?.getType()) {
            return "";
        }
        const schemaName = schema.getName();
        const schemaTypeName = `${schemaName}${schemaName === "Client" ? "Schema" : ""}`.replaceAll(/-/g, "_");
        return `export type ${schemaTypeName} = components["schemas"]["${schema.getName()}"];`;
    })
        .join("\n") ?? ""}
`.slice(1, -1);
}
//# sourceMappingURL=index.js.map